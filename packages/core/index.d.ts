/// <reference path="./global-types.d.ts" />
export { ApplicationEventData, LaunchEventData, OrientationChangedEventData, UnhandledErrorEventData, DiscardedErrorEventData, CssChangedEventData, LoadAppCSSEventData, iOSApplication, AndroidApplication, AndroidActivityEventData, AndroidActivityBundleEventData, AndroidActivityRequestPermissionsEventData, AndroidActivityResultEventData, AndroidActivityNewIntentEventData, AndroidActivityBackPressedEventData } from './application';
import { getMainEntry, getRootView, _resetRootView, getResources, setResources, setCssFileName, getCssFileName, loadAppCss, addCss, on, off, run, orientation, getNativeApplication, hasLaunched, AndroidApplication, iOSApplication } from './application';
export declare const Application: {
	launchEvent: string;
	displayedEvent: string;
	uncaughtErrorEvent: string;
	discardedErrorEvent: string;
	suspendEvent: string;
	resumeEvent: string;
	exitEvent: string;
	lowMemoryEvent: string;
	orientationChangedEvent: string;
	getMainEntry: typeof getMainEntry;
	getRootView: typeof getRootView;
	resetRootView: typeof _resetRootView;
	getResources: typeof getResources;
	setResources: typeof setResources;
	setCssFileName: typeof setCssFileName;
	getCssFileName: typeof getCssFileName;
	loadAppCss: typeof loadAppCss;
	addCss: typeof addCss;
	on: typeof on;
	off: typeof off;
	run: typeof run;
	orientation: typeof orientation;
	getNativeApplication: typeof getNativeApplication;
	hasLaunched: typeof hasLaunched;
	android: AndroidApplication;
	ios: iOSApplication;
};
import { setString, getString, clear, flush, getAllKeys, getBoolean, getNumber, hasKey, remove, setBoolean, setNumber } from './application-settings';
export declare const ApplicationSettings: {
	clear: typeof clear;
	flush: typeof flush;
	hasKey: typeof hasKey;
	remove: typeof remove;
	setString: typeof setString;
	getString: typeof getString;
	getAllKeys: typeof getAllKeys;
	getBoolean: typeof getBoolean;
	setBoolean: typeof setBoolean;
	getNumber: typeof getNumber;
	setNumber: typeof setNumber;
};
export { Color } from './color';
import { connectionType, getConnectionType, startMonitoring, stopMonitoring } from './connectivity';
export declare const Connectivity: {
	connectionType: typeof connectionType;
	getConnectionType: typeof getConnectionType;
	startMonitoring: typeof startMonitoring;
	stopMonitoring: typeof stopMonitoring;
};
export { ObservableArray, ChangeType, ChangedData } from './data/observable-array';
export { Observable, PropertyChangeData, EventData, WrappedValue, fromObject, fromObjectRecursive } from './data/observable';
export { VirtualArray, ItemsLoading } from './data/virtual-array';
export { File, FileSystemEntity, Folder, knownFolders, path } from './file-system';
export { HttpRequestOptions, HttpResponse, Headers, HttpResponseEncoding, HttpContent } from './http';
import { getFile, getImage, getJSON, getString as httpGetString, request } from './http';
export declare const Http: {
	getFile: typeof getFile;
	getImage: typeof getImage;
	getJSON: typeof getJSON;
	getString: typeof httpGetString;
	request: typeof request;
};
export { ImageAsset, ImageAssetOptions } from './image-asset';
export { ImageSource } from './image-source';
export { ModuleNameResolver, ModuleListProvider, PlatformContext, _setResolver } from './module-name-resolver';
export { isAndroid, isIOS, Screen, IDevice, Device, platformNames } from './platform';
// Profiling
export { InstrumentationMode, TimerInfo, profile, enable as profilingEnable, disable as profilingDisable, time as profilingTime, uptime as profilingUptime, start as profilingStart, stop as profilingStop, isRunning as profilingIsRunning, dumpProfiles as profilingDumpProfiles, resetProfiles as profilingResetProfiles, startCPUProfile as profilingStartCPU, stopCPUProfile as profilingStopCPU } from './profiling';
export { encoding } from './text';
export * from './trace';

export * from './ui';
import { GC, isFontIconURI, isDataURI, isFileOrResourcePath, executeOnMainThread, mainThreadify, isMainThread, dispatchToMainThread, releaseNativeObject, getModuleName, openFile, openUrl, isRealDevice, layout, ad as androidUtils, iOSNativeHelper as iosUtils, Source } from './utils';
import { ClassInfo, getClass, getBaseClasses, getClassInfo, isBoolean, isDefined, isFunction, isNullOrUndefined, isNumber, isObject, isString, isUndefined, toUIString, verifyCallback } from './utils/types';
export declare const Utils: {
	GC: typeof GC;
	isFontIconURI: typeof isFontIconURI;
	isDataURI: typeof isDataURI;
	isFileOrResourcePath: typeof isFileOrResourcePath;
	executeOnMainThread: typeof executeOnMainThread;
	mainThreadify: typeof mainThreadify;
	isMainThread: typeof isMainThread;
	dispatchToMainThread: typeof dispatchToMainThread;
	releaseNativeObject: typeof releaseNativeObject;
	getModuleName: typeof getModuleName;
	openFile: typeof openFile;
	openUrl: typeof openUrl;
	isRealDevice: typeof isRealDevice;
	layout: typeof layout;
	android: typeof androidUtils;
	// legacy (a lot of plugins use the shorthand "ad" Utils.ad instead of Utils.android)
	ad: typeof androidUtils;
	ios: typeof iosUtils;
	Source: typeof Source;
	ClassInfo: typeof ClassInfo;
	getClass: typeof getClass;
	getBaseClasses: typeof getBaseClasses;
	getClassInfo: typeof getClassInfo;
	isBoolean: typeof isBoolean;
	isDefined: typeof isDefined;
	isFunction: typeof isFunction;
	isNullOrUndefined: typeof isNullOrUndefined;
	isNumber: typeof isNumber;
	isObject: typeof isObject;
	isString: typeof isString;
	isUndefined: typeof isUndefined;
	toUIString: typeof toUIString;
	verifyCallback: typeof verifyCallback;
};
export { XmlParser, ParserEventType, ParserEvent } from './xml';
